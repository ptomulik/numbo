# @COPYRIGHT@
# Licensed under MIT license (LICENSE.txt).

Import(['conf'])
env = conf.env
#gvs = env['GVARS'].EnvProxy(env)

########################### Local Config checks ##############################
import sys
import SCons.Util

from SConsGnu import CcChecks

conf.AddTests(CcChecks.Tests())

if not conf.CheckCC():
    sys.stderr.write('** configure failed **\n')
    Exit(1)

if not conf.CheckCXX():
    sys.stderr.write('** configure failed **\n')
    Exit(1)

conf.Define( 'ENABLE_NLS', 1, 'Enable Native Language Support' )

if sys.maxsize > 2**32:
    conf.Define( 'NUMBO_ARCH_64BIT' )

conf.req_headers = []
conf.req_libs = []

########################### Nest into subdirs  ###############################
subdirs = [ ]
scripts = [ '%s/SConscript.conf' % s for s in subdirs ]
SConscript( scripts, exports = ['conf'] )

########################### Final steps ######################################
def _arg2str(arg):
    if SCons.Util.is_Sequence(arg): return ' or '.join(arg)
    else: return str(arg)

conf.req_headers += [
## For example:
##    ('libintl.h', '<>', 'C'),
]

conf.req_libs += [
## For example:
##    {'library': 'boost_program_options', 'autoadd' : 0, 'language' : 'c++'},
]

missing_headers = []
missing_libs = []
err = 0

for hdr in conf.req_headers:
    if SCons.Util.is_Dict(hdr):
        if not conf.CheckHeader(**hdr):
            missing_headers.append(_arg2str(hdr['header']))
    elif SCons.Util.is_Tuple(hdr):
        if not conf.CheckHeader(*hdr):
            missing_headers.append(_arg2str(hdr[0]))
    else:
        if not conf.CheckHeader(hdr):
            missing_headers.append(_arg2str(hdr))

for lib in conf.req_libs:
    if SCons.Util.is_Dict(lib):
        if not conf.CheckLib(**lib):
            missing_libs.append(_arg2str(lib['library']))
    elif SCons.Util.is_Tuple(lib):
        if not conf.CheckLib(*lib):
            missing_libs.append(_arg2str(lib[0]))
    else:
        if not conf.CheckLib(lib):
            missing_libs.append(_arg2str(lib))

if missing_headers:
    sys.stderr.write('Some required headers are missing or unusable '
                     '(see config.log):\n')
    sys.stderr.write('  %s\n' % '\n  '.join(missing_headers))
    err = 1

if missing_libs:
    sys.stderr.write('Some required libraries are missing are unusable '
                     '(see config.log):\n')
    sys.stderr.write('  %s\n' % '\n  '.join(missing_libs))
    err = 1

if err:
    sys.stderr.write('** configure failed **\n')
    Exit(err)

# Local Variables:
# # tab-width:4
# # indent-tabs-mode:nil
# # End:
# vim: set syntax=scons expandtab tabstop=4 shiftwidth=4:
